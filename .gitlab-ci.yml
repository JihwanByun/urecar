# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - docker-build
#  - sonar
#   - test
  - deploy

backend-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: openjdk:21-jdk-slim
  script:
    - echo "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - echo "backend build start"
    - ls -la    
    - cd backend
    - ls -la   
    - chmod +x ./gradlew 
    - ./gradlew wrapper
    - ./gradlew clean build
    - echo "backend build end"
  artifacts:
    paths:
      - backend/build/libs/*.jar  # JAR 파일을 빌드 아티팩트로 저장
    expire_in: 1 week
  before_script:
    - echo "Starting CI/CD pipeline"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
      changes:
        - backend/**
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

backend-docker-build-job:
  image: docker:latest
  stage: docker-build
  script:
    - echo "backend docker build start"
    - cd backend
    - echo "whoami"
    - whoami
    - echo "ls -la"
    - ls -la    
    - echo "pwd"
    - pwd
    - export TAG=$(date +%Y%m%d%H%M%S)
    - docker build -t imjunhyuk/urecar:$TAG .
    - docker tag imjunhyuk/urecar:$TAG imjunhyuk/urecar:latest
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD  # Docker Hub에 로그인
    - docker push imjunhyuk/urecar:latest  # Docker Hub로 이미지 푸시
    - docker push imjunhyuk/urecar:$TAG
    - echo "backend docker build end"
  after_script:
    - docker logout
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
      changes:
        - backend/**
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

backend-deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "backend deploy start"
    - ssh -o StrictHostKeyChecking=no ubuntu@j11a303.p.ssafy.io  "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD &&
      docker pull imjunhyuk/urecar:latest &&  
      docker-compose -f /home/ubuntu/docker/backend/docker-compose.yml up -d " # image pull from hub and docker-compose로 컨테이너 실행

#    - ssh -o StrictHostKeyChecking=no ubuntu@j11a303.p.ssafy.io "cd /home/ubuntu/docker/backend && docker-compose down"
#    - ssh -o StrictHostKeyChecking=no ubuntu@j11a303.p.ssafy.io "cd /home/ubuntu/docker/backend && docker-compose up -d"
    - echo "backend deploy end"
  after_script:
    - docker logout
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - backend/**
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

ai-docker-build-job:
  stage: docker-build
  script:
    - echo "ai docker build start"
    - cd ai/server
    - export TAG=$(date +%Y%m%d%H%M%S)
    - docker build -t imjunhyuk/urecar_ai:$TAG .
    - docker tag imjunhyuk/urecar_ai:$TAG imjunhyuk/urecar_ai:latest
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD  # Docker Hub에 로그인
    - docker push imjunhyuk/urecar_ai:latest  # Docker Hub로 이미지 푸시
    - docker push imjunhyuk/urecar_ai:$TAG
    - echo "ai docker build end"
  after_script:
    - docker logout
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - ai/**
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

ai-deploy-job:
  stage: deploy
  script:
    - echo "ai deploy start"
    - ssh -o StrictHostKeyChecking=no ubuntu@j11a303.p.ssafy.io  "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD &&
      docker pull imjunhyuk/urecar_ai:latest &&  
      docker-compose -f /home/ubuntu/docker/ai/docker-compose.yml up -d " # image pull from hub and docker-compose로 컨테이너 실행
    - echo "ai deploy end"
  after_script:
    - docker logout
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - ai/**
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
#sonarqube-check:
#  image: gradle:jdk21
#  stage: sonar
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - cd backend
#    - gradle sonar
#  allow_failure: true
#  only:
#    - develop

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
